import FinitelySupported.Perm.Basic

variable {ùî∏ X Y : Type*}

/-- A _permutable type_ `X` has a `Perm`-action. -/
class PermAction (ùî∏ : Type*) (X : Type*) where
  /-- Applies a permutation to an element. -/
  perm : Perm ùî∏ ‚Üí X ‚Üí X
  /-- The identity permutation acts as the identity. -/
  perm_one (x : X) : perm 1 x = x
  /-- Composition of permutations is composition of actions. -/
  perm_mul (œÄ‚ÇÅ œÄ‚ÇÇ : Perm ùî∏) (x : X) : perm œÄ‚ÇÅ (perm œÄ‚ÇÇ x) = perm (œÄ‚ÇÅ * œÄ‚ÇÇ) x

/-- A _finite support_ of an element `x` is, intuitively, any superset of `x`'s free variables. -/
structure IsSupp [PermAction ùî∏ X] (A : Finset ùî∏) (x : X) : Prop where
  /-- Any permutation which preserves the support acts as the identity. -/
  eq (œÄ : Perm ùî∏) : (‚àÄx ‚àà A, œÄ x = x) ‚Üí PermAction.perm œÄ x = x

namespace PermAction

attribute [simp] perm_one perm_mul

/-- We can construct `PermAction` instances via a bijection. -/
def lift (ùî∏) [PermAction ùî∏ X] (eq : X ‚âÉ Y) : PermAction ùî∏ Y where
  perm œÄ x := eq (perm œÄ (eq.invFun x))
  perm_one := by simp only [Equiv.invFun_as_coe, perm_one, Equiv.apply_symm_apply, implies_true]
  perm_mul := by simp only [Equiv.invFun_as_coe, Equiv.symm_apply_apply, perm_mul, implies_true]

@[simps]
instance : Inhabited (PermAction ùî∏ X) where
  default := {
    perm _ x := x
    perm_one _ := rfl
    perm_mul _ _ _ := rfl
  }

/-- Morphisms are exactly the set of finitely-supported functions. -/
@[fun_prop]
inductive IsHom (ùî∏) [PermAction ùî∏ X] [PermAction ùî∏ Y] (f : X ‚Üí Y) : Prop
  /--
  For convenience, we provide a different (but equivalent) definition instead
  of directly using `HasSupp`.
  -/
  | intro (A : Finset ùî∏)
    : (‚àÄ(œÄ : Perm ùî∏) (x : X), (‚àÄa ‚àà A, œÄ a = a) ‚Üí perm œÄ (f x) = f (perm œÄ x))
    ‚Üí IsHom ùî∏ f

@[inherit_doc IsHom]
scoped notation "IsHom[" inst‚ÇÅ ", " inst‚ÇÇ "]" => @IsHom _ _ _ inst‚ÇÅ inst‚ÇÇ

end PermAction
