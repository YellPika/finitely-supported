import FinitelySupported.PermAction.Prod

namespace PermAction.Sum

variable {ùî∏ X Y Z W : Type*} [PermAction ùî∏ X] [PermAction ùî∏ Y] [PermAction ùî∏ Z] [PermAction ùî∏ W]

@[simps]
instance : PermAction ùî∏ (X ‚äï Y) where
  perm œÄ := Sum.map (perm œÄ) (perm œÄ)
  perm_one := by simp only [Sum.forall, Sum.map_inl, perm_one, implies_true, Sum.map_inr, and_self]
  perm_mul := by simp only [
    Sum.map_map, Sum.forall, Sum.map_inl, Function.comp_apply,
    perm_mul, implies_true, Sum.map_inr, and_self]

@[simp]
lemma isHom_inl : IsHom ùî∏ (Sum.inl : X ‚Üí X ‚äï Y) := by
  use ‚àÖ
  simp only [Finset.notMem_empty, IsEmpty.forall_iff, implies_true, perm_def, Sum.map_inl]

@[fun_prop]
lemma isHom_inl' {f : X ‚Üí Y} (hf : IsHom ùî∏ f) : IsHom ùî∏ (fun x ‚Ü¶ (Sum.inl (f x) : Y ‚äï Z)) :=
  isHom_comp' isHom_inl hf

@[simp]
lemma isHom_inr : IsHom ùî∏ (Sum.inr : Y ‚Üí X ‚äï Y) := by
  use ‚àÖ
  simp only [Finset.notMem_empty, IsEmpty.forall_iff, implies_true, perm_def, Sum.map_inr]

@[fun_prop]
lemma isHom_inr' {f : X ‚Üí Z} (hf : IsHom ùî∏ f) : IsHom ùî∏ (fun x ‚Ü¶ (Sum.inr (f x) : Y ‚äï Z)) :=
  isHom_comp' isHom_inr hf

@[fun_prop]
lemma isHom_elim
    {f : X ‚Üí Y ‚Üí W} (hf : IsHom ùî∏ fun (x, y) ‚Ü¶ f x y)
    {g : X ‚Üí Z ‚Üí W} (hg : IsHom ùî∏ fun (x, y) ‚Ü¶ g x y)
    {h : X ‚Üí Y ‚äï Z} (hh : IsHom ùî∏ h)
    : IsHom ùî∏ (fun x ‚Ü¶ Sum.elim (f x) (g x) (h x)) := by
  classical
  rcases hf with ‚ü®A, hA‚ü©
  rcases hg with ‚ü®B, hB‚ü©
  rcases hh with ‚ü®C, hC‚ü©
  use A ‚à™ B ‚à™ C
  intros œÄ x hœÄ
  simp (disch := grind) only [‚Üê hC, perm_def]
  simp only [Prod.forall] at hA hB
  cases h x with
  | inl _ => simp (disch := grind) only [Sum.elim_inl, hA, Sum.map_inl]
  | inr _ => simp (disch := grind) only [Sum.elim_inr, hB, Sum.map_inr]

@[simp]
lemma isSupp_iff (A : Finset ùî∏) (x : X ‚äï Y) : IsSupp A x ‚Üî Sum.elim (IsSupp A) (IsSupp A) x := by
  apply Iff.intro
  ¬∑ intro ‚ü®h‚ü©
    simp only [perm_def] at h
    cases x with
    | inl x =>
      simp only [Sum.elim_inl]
      constructor
      grind
    | inr x =>
      simp only [Sum.elim_inr]
      constructor
      grind
  ¬∑ cases x with
    | inl x =>
      simp only [Sum.elim_inl]
      rintro ‚ü®h‚ü©
      constructor
      simp only [perm_def, Sum.map_inl, Sum.inl.injEq]
      exact h
    | inr x =>
      simp only [Sum.elim_inr]
      rintro ‚ü®h‚ü©
      constructor
      simp only [perm_def, Sum.map_inr, Sum.inr.injEq]
      exact h

end PermAction.Sum
